#!/bin/ksh

set -e

verbose=false
auth_enabled=false
proxy_mode=false

if [ `id -u` = 0 ]; then
	root=/var/www
	port=80
else
	root=~/www
	port=$((13000 + `id -u`))
fi

usage() {
	echo "usage: ${0##*/} [-v] [-a authfile] [-d rootdir] [-p port] [-r proxy_spec]" >&2
	exit 1
}

while getopts "a:d:p:r:v" OPT; do case $OPT in
	a)      auth_file=$OPTARG; auth_enabled=true;;
	d)      root=$OPTARG;;
	p)      port=$OPTARG;;
	v)      verbose=true;;
	r)	proxy_spec=$OPTARG; proxy_mode=true;;
	*)      usage;;
esac; done
shift $((OPTIND - 1))

if $auth_enabled; then
	authfile=$(readlink -f -- "$authfile")
	if ! [ -r "$authfile" -a -f "$authfile" ]; then
		echo "could not read file '$authfile'" >&2
		exit 1
	fi
fi

if $verbose; then
	echo "root directory is $root" >&2
else
	rl=$(command -v readlink)
	readlink() { $rl 2>/dev/null "$@"; }
fi

decode_base64() {
	printf "%s\n" "$1" | openssl enc -base64 -d
}

authenticate() {
	local decoded user password

	decoded="$(decode_base64 "$1")"
	user="$(printf "%s\n" "$decoded" | cut -f1 -d:)"
	password="$(printf "%s\n" "$decoded" | cut -f2 -d:)"

	while read -r data1 data2; do
		if [[ $user == $data1 && $password == $data2 ]]; then
			$verbose && echo "logged in as $user" >&2
			return 0
		fi
	done < "$auth_file"
	false
}


# It's okay to call this routine multiple times, see $sent
senderr() {
	$sent && return 0

	local text
	local v=1.0
	case $1 in
	400)    text="Bad request";;
	401)    text="Unauthorized";;
	403)    text="Not allowed";;
	404)    text="Not found";;
	416)	text="Range Not Satisfiable"; v=1.1;;
	*)      text="Server error"; set -- 500;;
	esac

	sent=true
	printf "HTTP/%s %s %s\r\n" "$v" "$1" "$text"
	printf "Date: %s\r\n" "$(env LC_ALL=en_US.UTF-8 date)"
	printf "Connection: close\r\n"
	if [[ $1 == 401 ]]; then
		printf "WWW-Authenticate: Basic realm=ShellWeb\r\n"
	elif [[ $1 == 416 ]]; then
		printf "Content-Range: bytes */%u\r\n" "$2"
	fi

	printf "\r\n"

	keep_conn=false
}

validate_and_send() {
	if [ x"${1#/}" = x"$1" ]; then
		senderr 400
		return
	fi

	local path="${root}$1"
	if [ -h "$path" ]; then
		sym_link "$path"
		return
	fi

	path=$(readlink -f "$path" || true)
	  if [ -z "$path" ]; then
		# hard symlink error: cycle or smth. like that
		senderr 404
	elif [ "x${path#$root}" = "x${path}" ]; then
		$verbose && echo "resulting path lies outside $root: $path" >&2
		senderr 403
	elif ! [ -e "$path" ]; then
		senderr 404
	elif ! [ -r "$path" ]; then
		$verbose && echo "resulting path $path is not readable" >&2
		senderr 403
	elif [ -d "$path" ]; then
		index "$1"
	elif [[ "$1" == *.cgi* ]]; then
		cgi "$1"
	elif [[ $portion == true ]]; then
		send_portion "$1"
	else
		sendfile "$1"
	fi
}

sym_link() {
	local path=$(readlink -f "$1" || true)
	if [ "x${path#$root}" = "x${path}" ]; then
		senderr 404
		return
	fi

	sent=true
	printf "HTTP/1.1 301 Moved Permanently\r\n"
	printf "Date: %s\r\n" "$(env LC_ALL=en_US.UTF-8 date)"
	printf "Location: \r\n" "${path#$root}"
	printf "Content-Length: 0\r\n"
	printf "Content-Type: text/html\r\n"
	printf "\r\n"
}

run_cgi() (
	export SERVER_SOFTWARE="shellweb3"
	export SERVER_NAME=
	export GATEWAY_INTERFACE="CGI/1.1"
	export SERVER_PROTOCOL="HTTP/1.1"
	export SERVER_PORT="$port"

	export QUERY_STRING=$(printf "%s\n" "$1" | sed 's/^.*\?//')
	export PATH_INFO=$(printf "%s\n" "$1" | sed 's/^.*\.cgi.*\?//')
	export REQUEST_METHOD="GET"
	export SCRIPT_NAME=$(printf "%s\n" "$1" | sed 's/^\(.*.cgi\).*$/\1/')

	export PATH_TRANSLATED=
	export REMOTE_HOST=
	export REMOTE_ADDR=
	export AUTH_TYPE=
	export REMOTE_USER=
	export REMOTE_IDENT=
	export CONTENT_TYPE=
	export CONTENT_LENGTH=

	"${root}$SCRIPT_NAME"
)

cgi() {
	sent=true
	run_cgi
}

# It's okay to call this routine even after senderr(), see $sent
sendfile() {
	$sent && return 0
	test -d "$1" && return 
	exec 3<"$root/$1" || { senderr 500; return 0; }
	local ct=$(file -bi "$root/$1") || { senderr 500; return 0; }
	local sz=$(ls -l "$root/$1" | awk '{print $5}') || { senderr 500; return 0; }
	sent=true
	printf "HTTP/1.1 200 OK\r\n"
	printf "Content-Type: %s\r\n"	"$ct"
	printf "Content-Length: %u\r\n"	"$sz"
	printf "Date: %s\r\n"		"$(env LC_ALL=en_US.UTF-8 date)"
	printf "\r\n"
	cat <&3
	exec 3<&-
}

send_portion() {
	$sent && return 0
	test -d "$1" && return
	local ct=$(file -bi "$root/$1") || { senderr 500; return 0; }
	local sz=$(ls -l "$root/$1" | awk '{print $5}') || { senderr 500; return 0; }
	local range_from=${range%%-*}
	local range_to=${range##*-}
	if [ -n "$range_from" ]; then
		if [ -z "$range_to" ]; then
			range_to=$(($sz - 1))
		elif [ "$range_to" -ge "$sz" ]; then
			range_to=$(($sz - 1))
		fi
	else
		if [ -z "$range_to" ]; then
			senderr 400
			return 0
		else
			range_from=$(($sz - $range_to))
			range_to=$(($sz - 1))
		fi
	fi
	test "$range_from" -gt "$range_to" && { senderr 416 "$sz"; return 0; }
	sent=true
	local length=$(( $range_to - $range_from + 1))
	printf "HTTP/1.1 206 Partial Content\r\n"
	printf "Content-Range: bytes %s\r\n" "${range_from}-${range_to}/$sz"
	printf "Content-Length: %u\r\n" "$length"
	printf "Content-Type: %s\r\n" "$ct"
	printf "\r\n"
	dd skip="$range_from" count="$length" if="$root/$1" bs=1 status=none
}
	
html_escape() {
	echo "$*" | sed -E \
		-e 's/&/\&amp;/g;' \
		-e 's/"/\&quot;/g;' \
		-e "s/'/\&#39;/g;" \
		-e 's/</\&lt;/g;' \
		-e 's/>/\&gt;/g;'
}

uri_escape() {
	echo "$*" | sed -E \
		-e 's/%/%25/g;' \
		-e 's/&/%26/g;' \
		-e 's/\?/%3f/g;' \
		-e 's/ /%20/g;'
}

html_link() {
	escaped=$(html_escape "$1")
	echo -n "<a href=\"$(uri_escape "$escaped")\">$escaped</a>"
}

format_file_size() {
	local sz=$1
	  if [ "$sz" -ge $((1024 * 1024 * 1024 * 1024 * 10)) ]; then
		sz="$((sz / (1024 * 1024 * 1024 * 1024) ))</td><td>TB"
	elif [ "$sz" -ge $((1024 * 1024 * 1024 * 10)) ]; then
		sz="$((sz / (1024 * 1024 * 1024) ))</td><td>GB"
	elif [ "$sz" -ge $((1024 * 1024 * 10)) ]; then
		sz="$((sz / (1024 * 1024) ))</td><td>MB"
	elif [ "$sz" -ge $((1024 * 10)) ]; then
		sz="$((sz / 1024))</td><td>KB"
	else
		sz="${sz}</td><td>B"
	fi
	echo "$sz"
}

file_info() {
	local fname="$1" date="$2" size="$3" type="$4"

	case $type in
	block|char|pipe|socket)	return;;
	esac

	echo -n "<tr><td class=\"fi type\">$(html_escape "$type")</td>"
	test "$type" = "dir" && fname="${fname}/"
	echo -n "<td class=\"fi fname\">$(html_link "$fname")</td>"
	echo -n "<td class=\"fi data\">$(html_escape "$date")</td>"
	echo -n "<td class=\"fi size\">$(format_file_size "$size")</td></tr>"
}

index() {

# to be put back instead of if..elif.. below when ksh bug fixed
if false; then
	case $(echo $mode | cut -c 1) in
	-) type=file;;
	b) type=block;;
	c) type=char;;
	d) type=dir;;
	l) type=link;;
	p) type=pipe;;
	s) type=socket;;
	*) type=unknown;;
	esac
fi

	body=$(
cat <<EOF
<html>
<head>
	<title>Index of $(html_escape "$1")</title>
	<style type="text/css">
		.fi { padding-left: 0.5em; }
		.size { text-align: right; }
	</style>
</head>
<body>
<h1>Index of $(html_escape "$1")</h1><hr><table>
EOF
		if [ "X${1%/}" != X ]; then
			parent=${1%%*(/)}
			parent=${parent%/*}
			test -n "$parent" || parent=/
			echo "<a href=\"$parent\">../</a><br />"
		fi
		local mode links owner group size mon day time year name
		local type
		ls -lT "$root$1" | tail -n +2 | while read mode links owner group size mon day time year name; do
			  if [ "${mode#-}" != "$mode" ]; then	type=file
			elif [ "${mode#b}" != "$mode" ]; then	type=block
			elif [ "${mode#c}" != "$mode" ]; then	type=char
			elif [ "${mode#d}" != "$mode" ]; then	type=dir
			elif [ "${mode#l}" != "$mode" ]; then	type=link
			elif [ "${mode#p}" != "$mode" ]; then	type=pipe
			elif [ "${mode#s}" != "$mode" ]; then	type=socket
			else                                 	type=unknown
			fi
			file_info "$name" "${year}-${mon}-${day} $time" "$size" "${type}"
		done
		echo "</table><hr></body>"
		echo "</html>"
	)
	sz=$(printf "%s" "$body" | wc -c)
	
	printf "HTTP/1.1 200 OK\r\n"
	printf "Content-Type: text/html\r\n"
	printf "Content-Length: %u\r\n"		"$sz"
	printf "\r\n"
	printf "%s" "$body"
}

proxy() {
	proxy_port=${proxy_spec##*:}
	if [[ x"$proxy_port" = x"$proxy_spec" ]]; then
		proxy_port=80
	fi
	while read -p -r v; do
		if [[ $v = "Host: "* ]]; then
			printf "Host: ${proxy_spec}\r\n"
		elif [[ $v = $(printf "\r\n") ]]; then
			ip=$(fstat -p $ncpid | awk '$7 == "tcp" {print $11}' | sed '/^$/d')
			printf "X-Forwarded-For: ${ip}\r\n\r\n"
		else
			printf "$v\n"
		fi
	done | nc ${proxy_spec%%:*} $proxy_port >&p
}
			

NC=nc
if $verbose; then
	NC="$NC -v"
fi
NC="$NC -kl $port"

while true; do
	file=
	sent=false
	$NC |&
	$verbose && echo "waiting for new connection on port $port" >&2
	ncpid=$!
	$proxy_mode && proxy
	auth_passed=false
	keep_conn=false
	portion=false
	range=
	while ! $proxy_mode &&  ! $sent && read -p v1 v2 v3; do
		header=$(echo "$v1" | tr A-Z a-z)
		if [ -z "$file" ]; then
			# parsing first line
			file=$v2
			[[ $v1 = GET ]] || senderr 400
			[[ $v3 = $(printf "HTTP/1.[01]\r") ]] || senderr 400
			[[ $v3 = HTTP/1.1? ]] && keep_conn=true

		# authentication handling
		elif $auth_enabled && [[ $header == "authorization:" ]]; then
			if [[ $v2 == "Basic" ]] && authenticate "$v3"; then
				auth_passed=true
			fi

		elif [[ $header == "connection:" && $v2 == $(printf "close\r") ]]; then
			keep_conn=false

		elif [[ $header = $(printf "\r\n") && -z $v2 ]]; then
			# empty line (end of headers)
			if [ -n "$file" ]; then
				if ! $auth_enabled || $auth_passed; then
					$verbose && echo "$file is requested" >&2
					validate_and_send "$file"
				else
					$verbose && echo "not authenticated" >&2
					senderr 401
				fi
			else
				senderr 400
			fi
			file=
			auth_passed=false
			portion=false
			if $keep_conn; then
				sent=false
			fi
		elif [[ $header == "range:" ]]; then
			$verbose && echo "Range $v2 from $file requested" >&2
			range=$(echo "${v2##bytes=}" | tr -d '\r')
			portion=true
		# else ignore all headers
		fi
	done >&p
	exec 3>&p && exec 3>&- && kill $ncpid
	wait
done
